// Generated from runa/RunaLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,21,210,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,
2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,
18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,
7,25,2,26,7,26,2,27,7,27,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
1,7,1,8,1,8,1,9,1,9,1,9,3,9,97,8,9,1,10,4,10,100,8,10,11,10,12,10,101,1,
11,5,11,105,8,11,10,11,12,11,108,9,11,1,11,1,11,4,11,112,8,11,11,11,12,11,
113,1,12,1,12,3,12,118,8,12,1,13,3,13,121,8,13,1,13,1,13,4,13,125,8,13,11,
13,12,13,126,1,14,4,14,130,8,14,11,14,12,14,131,1,14,1,14,1,15,4,15,137,
8,15,11,15,12,15,138,1,16,1,16,5,16,143,8,16,10,16,12,16,146,9,16,1,16,1,
16,1,17,4,17,151,8,17,11,17,12,17,152,1,17,1,17,1,18,1,18,1,18,1,19,4,19,
161,8,19,11,19,12,19,162,1,19,1,19,1,20,1,20,1,20,1,20,1,21,4,21,172,8,21,
11,21,12,21,173,1,21,1,21,1,21,3,21,179,8,21,1,22,1,22,1,22,4,22,184,8,22,
11,22,12,22,185,1,22,1,22,1,23,1,23,5,23,192,8,23,10,23,12,23,195,9,23,1,
24,1,24,4,24,199,8,24,11,24,12,24,200,1,25,1,25,1,26,1,26,1,27,1,27,1,27,
1,27,0,0,28,4,1,6,2,8,3,10,4,12,5,14,6,16,0,18,0,20,0,22,0,24,0,26,0,28,
7,30,8,32,9,34,10,36,11,38,12,40,13,42,14,44,15,46,0,48,16,50,17,52,18,54,
19,56,20,58,21,4,0,1,2,3,5,2,0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,8,0,
10,10,13,13,58,58,60,60,62,62,64,64,123,123,125,125,5,0,45,45,48,57,65,90,
95,95,97,122,220,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,
0,0,0,0,14,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,1,
36,1,0,0,0,1,38,1,0,0,0,2,40,1,0,0,0,2,42,1,0,0,0,2,44,1,0,0,0,2,48,1,0,
0,0,2,50,1,0,0,0,3,52,1,0,0,0,3,54,1,0,0,0,3,56,1,0,0,0,3,58,1,0,0,0,4,60,
1,0,0,0,6,70,1,0,0,0,8,77,1,0,0,0,10,81,1,0,0,0,12,83,1,0,0,0,14,85,1,0,
0,0,16,87,1,0,0,0,18,89,1,0,0,0,20,91,1,0,0,0,22,96,1,0,0,0,24,99,1,0,0,
0,26,106,1,0,0,0,28,117,1,0,0,0,30,124,1,0,0,0,32,129,1,0,0,0,34,136,1,0,
0,0,36,140,1,0,0,0,38,150,1,0,0,0,40,156,1,0,0,0,42,160,1,0,0,0,44,166,1,
0,0,0,46,178,1,0,0,0,48,183,1,0,0,0,50,189,1,0,0,0,52,198,1,0,0,0,54,202,
1,0,0,0,56,204,1,0,0,0,58,206,1,0,0,0,60,61,5,64,0,0,61,62,5,105,0,0,62,
63,5,109,0,0,63,64,5,112,0,0,64,65,5,111,0,0,65,66,5,114,0,0,66,67,5,116,
0,0,67,68,1,0,0,0,68,69,6,0,0,0,69,5,1,0,0,0,70,71,5,108,0,0,71,72,5,111,
0,0,72,73,5,114,0,0,73,74,5,97,0,0,74,75,1,0,0,0,75,76,6,1,1,0,76,7,1,0,
0,0,77,78,5,123,0,0,78,79,1,0,0,0,79,80,6,2,2,0,80,9,1,0,0,0,81,82,5,125,
0,0,82,11,1,0,0,0,83,84,5,58,0,0,84,13,1,0,0,0,85,86,5,60,0,0,86,15,1,0,
0,0,87,88,7,0,0,0,88,17,1,0,0,0,89,90,7,1,0,0,90,19,1,0,0,0,91,92,7,2,0,
0,92,21,1,0,0,0,93,97,3,16,6,0,94,97,3,18,7,0,95,97,5,95,0,0,96,93,1,0,0,
0,96,94,1,0,0,0,96,95,1,0,0,0,97,23,1,0,0,0,98,100,3,18,7,0,99,98,1,0,0,
0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,25,1,0,0,0,103,105,
3,18,7,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,
107,109,1,0,0,0,108,106,1,0,0,0,109,111,5,46,0,0,110,112,3,18,7,0,111,110,
1,0,0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,27,1,0,0,0,115,
118,3,24,10,0,116,118,3,26,11,0,117,115,1,0,0,0,117,116,1,0,0,0,118,29,1,
0,0,0,119,121,5,13,0,0,120,119,1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,
125,5,10,0,0,123,125,5,13,0,0,124,120,1,0,0,0,124,123,1,0,0,0,125,126,1,
0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,31,1,0,0,0,128,130,7,2,0,0,129,
128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,133,1,0,
0,0,133,134,6,14,3,0,134,33,1,0,0,0,135,137,8,3,0,0,136,135,1,0,0,0,137,
138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,35,1,0,0,0,140,144,3,16,
6,0,141,143,3,22,9,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,
145,1,0,0,0,145,147,1,0,0,0,146,144,1,0,0,0,147,148,6,16,4,0,148,37,1,0,
0,0,149,151,7,2,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,
153,1,0,0,0,153,154,1,0,0,0,154,155,6,17,3,0,155,39,1,0,0,0,156,157,5,97,
0,0,157,158,5,115,0,0,158,41,1,0,0,0,159,161,7,2,0,0,160,159,1,0,0,0,161,
162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,6,19,
3,0,165,43,1,0,0,0,166,167,3,30,13,0,167,168,1,0,0,0,168,169,6,20,4,0,169,
45,1,0,0,0,170,172,7,4,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,
0,173,174,1,0,0,0,174,179,1,0,0,0,175,179,5,46,0,0,176,177,5,46,0,0,177,
179,5,46,0,0,178,171,1,0,0,0,178,175,1,0,0,0,178,176,1,0,0,0,179,47,1,0,
0,0,180,181,3,46,21,0,181,182,5,47,0,0,182,184,1,0,0,0,183,180,1,0,0,0,184,
185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,188,3,46,
21,0,188,49,1,0,0,0,189,193,3,16,6,0,190,192,3,22,9,0,191,190,1,0,0,0,192,
195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,51,1,0,0,0,195,193,1,0,0,
0,196,199,3,22,9,0,197,199,5,45,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,
200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,53,1,0,0,0,202,203,5,58,
0,0,203,55,1,0,0,0,204,205,3,28,12,0,205,57,1,0,0,0,206,207,5,62,0,0,207,
208,1,0,0,0,208,209,6,27,4,0,209,59,1,0,0,0,23,0,1,2,3,96,101,106,113,117,
120,124,126,131,138,144,152,162,173,178,185,193,198,200,5,5,2,0,5,3,0,5,
1,0,6,0,0,4,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class RunaLexer extends antlr4.Lexer {

    static grammarFileName = "RunaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE", "VARIABLE", "IMPORT_MODE", "LORA_MODE" ];
	static literalNames = [ null, "'@import'", "'lora'", "'{'", "'}'", null, 
                         "'<'", null, null, null, null, null, null, "'as'", 
                         null, null, null, null, null, null, null, "'>'" ];
	static symbolicNames = [ null, "IMPORT", "LORA", "LBRACE", "RBRACE", "COLON", 
                          "LANGLE", "NUMBER", "NEWLINE", "WS", "TEXT", "VAR_IDENTIFIER", 
                          "VAR_WS", "IMPORT_AS", "IMPORT_WS", "IMPORT_NEWLINE", 
                          "IMPORT_PATH", "IMPORT_IDENTIFIER", "LORA_IDENTIFIER", 
                          "LORA_COLON", "LORA_NUMBER", "RANGLE" ];
	static ruleNames = [ "IMPORT", "LORA", "LBRACE", "RBRACE", "COLON", "LANGLE", 
                      "LETTER", "DIGIT", "WHITESPACE", "IDENTIFIER_CHAR", 
                      "INTEGER", "FLOAT", "NUMBER", "NEWLINE", "WS", "TEXT", 
                      "VAR_IDENTIFIER", "VAR_WS", "IMPORT_AS", "IMPORT_WS", 
                      "IMPORT_NEWLINE", "IMPORT_PATH_PART", "IMPORT_PATH", 
                      "IMPORT_IDENTIFIER", "LORA_IDENTIFIER", "LORA_COLON", 
                      "LORA_NUMBER", "RANGLE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

RunaLexer.EOF = antlr4.Token.EOF;
RunaLexer.IMPORT = 1;
RunaLexer.LORA = 2;
RunaLexer.LBRACE = 3;
RunaLexer.RBRACE = 4;
RunaLexer.COLON = 5;
RunaLexer.LANGLE = 6;
RunaLexer.NUMBER = 7;
RunaLexer.NEWLINE = 8;
RunaLexer.WS = 9;
RunaLexer.TEXT = 10;
RunaLexer.VAR_IDENTIFIER = 11;
RunaLexer.VAR_WS = 12;
RunaLexer.IMPORT_AS = 13;
RunaLexer.IMPORT_WS = 14;
RunaLexer.IMPORT_NEWLINE = 15;
RunaLexer.IMPORT_PATH = 16;
RunaLexer.IMPORT_IDENTIFIER = 17;
RunaLexer.LORA_IDENTIFIER = 18;
RunaLexer.LORA_COLON = 19;
RunaLexer.LORA_NUMBER = 20;
RunaLexer.RANGLE = 21;

RunaLexer.VARIABLE = 1;
RunaLexer.IMPORT_MODE = 2;
RunaLexer.LORA_MODE = 3;




