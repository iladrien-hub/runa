// Generated from runa/RunaLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,15,168,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,
11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,
2,19,7,19,2,20,7,20,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,3,7,73,8,7,1,8,4,
8,76,8,8,11,8,12,8,77,1,9,5,9,81,8,9,10,9,12,9,84,9,9,1,9,1,9,4,9,88,8,9,
11,9,12,9,89,1,10,1,10,3,10,94,8,10,1,11,3,11,97,8,11,1,11,1,11,4,11,101,
8,11,11,11,12,11,102,1,12,4,12,106,8,12,11,12,12,12,107,1,12,1,12,1,13,4,
13,113,8,13,11,13,12,13,114,1,14,1,14,5,14,119,8,14,10,14,12,14,122,9,14,
1,14,1,14,1,15,4,15,127,8,15,11,15,12,15,128,1,15,1,15,1,16,1,16,1,16,1,
17,4,17,137,8,17,11,17,12,17,138,1,17,1,17,1,18,1,18,1,18,1,18,1,19,4,19,
148,8,19,11,19,12,19,149,1,19,4,19,153,8,19,11,19,12,19,154,1,19,4,19,158,
8,19,11,19,12,19,159,1,20,1,20,5,20,164,8,20,10,20,12,20,167,9,20,0,0,21,
3,1,5,2,7,3,9,4,11,0,13,0,15,0,17,0,19,0,21,0,23,5,25,6,27,7,29,8,31,9,33,
10,35,11,37,12,39,13,41,14,43,15,3,0,1,2,5,2,0,65,90,97,122,1,0,48,57,2,
0,9,9,32,32,6,0,10,10,13,13,58,58,64,64,123,123,125,125,5,0,45,45,48,57,
65,90,95,95,97,122,177,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,1,33,1,0,
0,0,2,35,1,0,0,0,2,37,1,0,0,0,2,39,1,0,0,0,2,41,1,0,0,0,2,43,1,0,0,0,3,45,
1,0,0,0,5,55,1,0,0,0,7,59,1,0,0,0,9,61,1,0,0,0,11,63,1,0,0,0,13,65,1,0,0,
0,15,67,1,0,0,0,17,72,1,0,0,0,19,75,1,0,0,0,21,82,1,0,0,0,23,93,1,0,0,0,
25,100,1,0,0,0,27,105,1,0,0,0,29,112,1,0,0,0,31,116,1,0,0,0,33,126,1,0,0,
0,35,132,1,0,0,0,37,136,1,0,0,0,39,142,1,0,0,0,41,152,1,0,0,0,43,161,1,0,
0,0,45,46,5,64,0,0,46,47,5,105,0,0,47,48,5,109,0,0,48,49,5,112,0,0,49,50,
5,111,0,0,50,51,5,114,0,0,51,52,5,116,0,0,52,53,1,0,0,0,53,54,6,0,0,0,54,
4,1,0,0,0,55,56,5,123,0,0,56,57,1,0,0,0,57,58,6,1,1,0,58,6,1,0,0,0,59,60,
5,125,0,0,60,8,1,0,0,0,61,62,5,58,0,0,62,10,1,0,0,0,63,64,7,0,0,0,64,12,
1,0,0,0,65,66,7,1,0,0,66,14,1,0,0,0,67,68,7,2,0,0,68,16,1,0,0,0,69,73,3,
11,4,0,70,73,3,13,5,0,71,73,5,95,0,0,72,69,1,0,0,0,72,70,1,0,0,0,72,71,1,
0,0,0,73,18,1,0,0,0,74,76,3,13,5,0,75,74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,
0,0,77,78,1,0,0,0,78,20,1,0,0,0,79,81,3,13,5,0,80,79,1,0,0,0,81,84,1,0,0,
0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,87,5,46,0,0,
86,88,3,13,5,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,
22,1,0,0,0,91,94,3,19,8,0,92,94,3,21,9,0,93,91,1,0,0,0,93,92,1,0,0,0,94,
24,1,0,0,0,95,97,5,13,0,0,96,95,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,101,
5,10,0,0,99,101,5,13,0,0,100,96,1,0,0,0,100,99,1,0,0,0,101,102,1,0,0,0,102,
100,1,0,0,0,102,103,1,0,0,0,103,26,1,0,0,0,104,106,7,2,0,0,105,104,1,0,0,
0,106,107,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,
6,12,2,0,110,28,1,0,0,0,111,113,8,3,0,0,112,111,1,0,0,0,113,114,1,0,0,0,
114,112,1,0,0,0,114,115,1,0,0,0,115,30,1,0,0,0,116,120,3,11,4,0,117,119,
3,17,7,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,
121,123,1,0,0,0,122,120,1,0,0,0,123,124,6,14,3,0,124,32,1,0,0,0,125,127,
7,2,0,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,
129,130,1,0,0,0,130,131,6,15,2,0,131,34,1,0,0,0,132,133,5,97,0,0,133,134,
5,115,0,0,134,36,1,0,0,0,135,137,7,2,0,0,136,135,1,0,0,0,137,138,1,0,0,0,
138,136,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,6,17,2,0,141,38,
1,0,0,0,142,143,3,25,11,0,143,144,1,0,0,0,144,145,6,18,3,0,145,40,1,0,0,
0,146,148,7,4,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,
1,0,0,0,150,151,1,0,0,0,151,153,5,47,0,0,152,147,1,0,0,0,153,154,1,0,0,0,
154,152,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,158,7,4,0,0,157,156,
1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,42,1,0,0,0,161,
165,3,11,4,0,162,164,3,17,7,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,
0,0,0,165,166,1,0,0,0,166,44,1,0,0,0,167,165,1,0,0,0,20,0,1,2,72,77,82,89,
93,96,100,102,107,114,120,128,138,149,154,159,165,4,5,2,0,5,1,0,6,0,0,4,
0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class RunaLexer extends antlr4.Lexer {

    static grammarFileName = "RunaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE", "VARIABLE", "IMPORT_MODE" ];
	static literalNames = [ null, "'@import'", "'{'", "'}'", "':'", null, null, 
                         null, null, null, null, "'as'" ];
	static symbolicNames = [ null, "IMPORT", "LBRACE", "RBRACE", "COLON", "NUMBER", 
                          "NEWLINE", "WS", "TEXT", "VAR_IDENTIFIER", "VAR_WS", 
                          "IMPORT_AS", "IMPORT_WS", "IMPORT_NEWLINE", "IMPORT_PATH", 
                          "IMPORT_IDENTIFIER" ];
	static ruleNames = [ "IMPORT", "LBRACE", "RBRACE", "COLON", "LETTER", "DIGIT", 
                      "WHITESPACE", "IDENTIFIER_CHAR", "INTEGER", "FLOAT", 
                      "NUMBER", "NEWLINE", "WS", "TEXT", "VAR_IDENTIFIER", 
                      "VAR_WS", "IMPORT_AS", "IMPORT_WS", "IMPORT_NEWLINE", 
                      "IMPORT_PATH", "IMPORT_IDENTIFIER" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

RunaLexer.EOF = antlr4.Token.EOF;
RunaLexer.IMPORT = 1;
RunaLexer.LBRACE = 2;
RunaLexer.RBRACE = 3;
RunaLexer.COLON = 4;
RunaLexer.NUMBER = 5;
RunaLexer.NEWLINE = 6;
RunaLexer.WS = 7;
RunaLexer.TEXT = 8;
RunaLexer.VAR_IDENTIFIER = 9;
RunaLexer.VAR_WS = 10;
RunaLexer.IMPORT_AS = 11;
RunaLexer.IMPORT_WS = 12;
RunaLexer.IMPORT_NEWLINE = 13;
RunaLexer.IMPORT_PATH = 14;
RunaLexer.IMPORT_IDENTIFIER = 15;

RunaLexer.VARIABLE = 1;
RunaLexer.IMPORT_MODE = 2;




