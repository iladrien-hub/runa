// Generated from runa/RunaLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,26,279,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,
1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,
10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,
2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,
25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,
7,32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,3,9,119,8,9,1,10,4,
10,122,8,10,11,10,12,10,123,1,11,5,11,127,8,11,10,11,12,11,130,9,11,1,11,
1,11,4,11,134,8,11,11,11,12,11,135,1,12,1,12,1,12,1,13,1,13,5,13,143,8,13,
10,13,12,13,146,9,13,1,14,1,14,3,14,150,8,14,1,15,5,15,153,8,15,10,15,12,
15,156,9,15,1,15,1,15,1,15,1,15,5,15,162,8,15,10,15,12,15,165,9,15,1,15,
1,15,3,15,169,8,15,1,15,1,15,1,16,5,16,174,8,16,10,16,12,16,177,9,16,1,16,
3,16,180,8,16,1,16,1,16,4,16,184,8,16,11,16,12,16,185,1,16,1,16,1,17,4,17,
191,8,17,11,17,12,17,192,1,17,1,17,1,18,1,18,4,18,199,8,18,11,18,12,18,200,
1,19,1,19,1,20,4,20,206,8,20,11,20,12,20,207,1,20,1,20,1,21,1,21,1,21,1,
21,1,22,1,22,1,22,1,23,4,23,220,8,23,11,23,12,23,221,1,23,1,23,1,24,1,24,
1,24,1,24,1,25,4,25,231,8,25,11,25,12,25,232,1,25,1,25,1,25,3,25,238,8,25,
1,26,1,26,1,26,4,26,243,8,26,11,26,12,26,244,1,26,1,26,1,27,1,27,1,28,1,
28,4,28,253,8,28,11,28,12,28,254,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,
1,32,4,32,266,8,32,11,32,12,32,267,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,
34,1,35,1,35,0,0,36,5,1,7,2,9,3,11,4,13,5,15,6,17,0,19,0,21,0,23,0,25,0,
27,0,29,0,31,0,33,7,35,8,37,9,39,0,41,10,43,11,45,12,47,13,49,14,51,15,53,
16,55,0,57,17,59,18,61,19,63,20,65,21,67,22,69,23,71,24,73,25,75,26,5,0,
1,2,3,4,7,2,0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,8,0,47,47,58,58,60,60,
62,62,64,64,92,92,123,123,125,125,2,0,10,10,13,13,11,0,10,10,13,13,32,32,
47,47,58,58,60,60,62,62,64,64,92,92,123,123,125,125,5,0,45,45,48,57,65,90,
95,95,97,122,291,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
0,0,0,0,15,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
41,1,0,0,0,1,43,1,0,0,0,1,45,1,0,0,0,1,47,1,0,0,0,2,49,1,0,0,0,2,51,1,0,
0,0,2,53,1,0,0,0,2,57,1,0,0,0,2,59,1,0,0,0,3,61,1,0,0,0,3,63,1,0,0,0,3,65,
1,0,0,0,3,67,1,0,0,0,4,69,1,0,0,0,4,71,1,0,0,0,4,73,1,0,0,0,4,75,1,0,0,0,
5,77,1,0,0,0,7,87,1,0,0,0,9,94,1,0,0,0,11,101,1,0,0,0,13,105,1,0,0,0,15,
107,1,0,0,0,17,109,1,0,0,0,19,111,1,0,0,0,21,113,1,0,0,0,23,118,1,0,0,0,
25,121,1,0,0,0,27,128,1,0,0,0,29,137,1,0,0,0,31,140,1,0,0,0,33,149,1,0,0,
0,35,154,1,0,0,0,37,175,1,0,0,0,39,190,1,0,0,0,41,198,1,0,0,0,43,202,1,0,
0,0,45,205,1,0,0,0,47,211,1,0,0,0,49,215,1,0,0,0,51,219,1,0,0,0,53,225,1,
0,0,0,55,237,1,0,0,0,57,242,1,0,0,0,59,248,1,0,0,0,61,252,1,0,0,0,63,256,
1,0,0,0,65,258,1,0,0,0,67,260,1,0,0,0,69,265,1,0,0,0,71,271,1,0,0,0,73,275,
1,0,0,0,75,277,1,0,0,0,77,78,5,64,0,0,78,79,5,105,0,0,79,80,5,109,0,0,80,
81,5,112,0,0,81,82,5,111,0,0,82,83,5,114,0,0,83,84,5,116,0,0,84,85,1,0,0,
0,85,86,6,0,0,0,86,6,1,0,0,0,87,88,5,64,0,0,88,89,5,117,0,0,89,90,5,115,
0,0,90,91,5,101,0,0,91,92,1,0,0,0,92,93,6,1,1,0,93,8,1,0,0,0,94,95,5,108,
0,0,95,96,5,111,0,0,96,97,5,114,0,0,97,98,5,97,0,0,98,99,1,0,0,0,99,100,
6,2,2,0,100,10,1,0,0,0,101,102,5,123,0,0,102,103,1,0,0,0,103,104,6,3,3,0,
104,12,1,0,0,0,105,106,5,58,0,0,106,14,1,0,0,0,107,108,5,60,0,0,108,16,1,
0,0,0,109,110,7,0,0,0,110,18,1,0,0,0,111,112,7,1,0,0,112,20,1,0,0,0,113,
114,7,2,0,0,114,22,1,0,0,0,115,119,3,17,6,0,116,119,3,19,7,0,117,119,5,95,
0,0,118,115,1,0,0,0,118,116,1,0,0,0,118,117,1,0,0,0,119,24,1,0,0,0,120,122,
3,19,7,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,
124,26,1,0,0,0,125,127,3,19,7,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,
1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,133,5,46,0,0,
132,134,3,19,7,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,
1,0,0,0,136,28,1,0,0,0,137,138,5,92,0,0,138,139,7,3,0,0,139,30,1,0,0,0,140,
144,3,17,6,0,141,143,3,23,9,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,
0,0,0,144,145,1,0,0,0,145,32,1,0,0,0,146,144,1,0,0,0,147,150,3,25,10,0,148,
150,3,27,11,0,149,147,1,0,0,0,149,148,1,0,0,0,150,34,1,0,0,0,151,153,3,21,
8,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,
157,1,0,0,0,156,154,1,0,0,0,157,158,5,47,0,0,158,159,5,47,0,0,159,163,1,
0,0,0,160,162,8,4,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,
164,1,0,0,0,164,168,1,0,0,0,165,163,1,0,0,0,166,169,3,37,16,0,167,169,5,
0,0,1,168,166,1,0,0,0,168,167,1,0,0,0,169,170,1,0,0,0,170,171,6,15,4,0,171,
36,1,0,0,0,172,174,3,21,8,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,
0,0,175,176,1,0,0,0,176,183,1,0,0,0,177,175,1,0,0,0,178,180,5,13,0,0,179,
178,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,184,5,10,0,0,182,184,5,13,
0,0,183,179,1,0,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,
186,1,0,0,0,186,187,1,0,0,0,187,188,6,16,4,0,188,38,1,0,0,0,189,191,3,21,
8,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,
194,1,0,0,0,194,195,6,17,5,0,195,40,1,0,0,0,196,199,3,29,12,0,197,199,8,
5,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,
201,1,0,0,0,201,42,1,0,0,0,202,203,3,31,13,0,203,44,1,0,0,0,204,206,3,21,
8,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,
209,1,0,0,0,209,210,6,20,4,0,210,46,1,0,0,0,211,212,5,125,0,0,212,213,1,
0,0,0,213,214,6,21,6,0,214,48,1,0,0,0,215,216,5,97,0,0,216,217,5,115,0,0,
217,50,1,0,0,0,218,220,7,2,0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,219,1,
0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,6,23,4,0,224,52,1,0,0,0,225,
226,3,37,16,0,226,227,1,0,0,0,227,228,6,24,6,0,228,54,1,0,0,0,229,231,7,
6,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,
238,1,0,0,0,234,238,5,46,0,0,235,236,5,46,0,0,236,238,5,46,0,0,237,230,1,
0,0,0,237,234,1,0,0,0,237,235,1,0,0,0,238,56,1,0,0,0,239,240,3,55,25,0,240,
241,5,47,0,0,241,243,1,0,0,0,242,239,1,0,0,0,243,244,1,0,0,0,244,242,1,0,
0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,3,55,25,0,247,58,1,0,0,0,248,
249,3,31,13,0,249,60,1,0,0,0,250,253,3,23,9,0,251,253,5,45,0,0,252,250,1,
0,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,
62,1,0,0,0,256,257,5,58,0,0,257,64,1,0,0,0,258,259,3,33,14,0,259,66,1,0,
0,0,260,261,5,62,0,0,261,262,1,0,0,0,262,263,6,31,6,0,263,68,1,0,0,0,264,
266,7,2,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,
0,0,268,269,1,0,0,0,269,270,6,32,4,0,270,70,1,0,0,0,271,272,3,37,16,0,272,
273,1,0,0,0,273,274,6,33,6,0,274,72,1,0,0,0,275,276,3,59,27,0,276,74,1,0,
0,0,277,278,3,31,13,0,278,76,1,0,0,0,29,0,1,2,3,4,118,123,128,135,144,149,
154,163,168,175,179,183,185,192,198,200,207,221,232,237,244,252,254,267,
7,5,2,0,5,4,0,5,3,0,5,1,0,6,0,0,7,10,0,4,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class RunaLexer extends antlr4.Lexer {

    static grammarFileName = "RunaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE", "VARIABLE", "IMPORT_MODE", "LORA_MODE", 
                      "USE_MODE" ];
	static literalNames = [ null, "'@import'", "'@use'", "'lora'", "'{'", null, 
                         "'<'", null, null, null, null, null, null, "'}'", 
                         "'as'", null, null, null, null, null, null, null, 
                         "'>'" ];
	static symbolicNames = [ null, "IMPORT", "USE", "LORA", "LBRACE", "COLON", 
                          "LANGLE", "NUMBER", "COMMENT", "NEWLINE", "TEXT", 
                          "VAR_IDENTIFIER", "VAR_WS", "RBRACE", "IMPORT_AS", 
                          "IMPORT_WS", "IMPORT_NEWLINE", "IMPORT_PATH", 
                          "IMPORT_IDENTIFIER", "LORA_IDENTIFIER", "LORA_COLON", 
                          "LORA_NUMBER", "RANGLE", "USE_WS", "USE_NEWLINE", 
                          "USE_IDENTIFIER", "USE_NAME" ];
	static ruleNames = [ "IMPORT", "USE", "LORA", "LBRACE", "COLON", "LANGLE", 
                      "LETTER", "DIGIT", "WHITESPACE", "IDENTIFIER_CHAR", 
                      "INTEGER", "FLOAT", "ESCAPED_CHAR", "VARIABLE_NAME", 
                      "NUMBER", "COMMENT", "NEWLINE", "WS", "TEXT", "VAR_IDENTIFIER", 
                      "VAR_WS", "RBRACE", "IMPORT_AS", "IMPORT_WS", "IMPORT_NEWLINE", 
                      "IMPORT_PATH_PART", "IMPORT_PATH", "IMPORT_IDENTIFIER", 
                      "LORA_IDENTIFIER", "LORA_COLON", "LORA_NUMBER", "RANGLE", 
                      "USE_WS", "USE_NEWLINE", "USE_IDENTIFIER", "USE_NAME" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

RunaLexer.EOF = antlr4.Token.EOF;
RunaLexer.IMPORT = 1;
RunaLexer.USE = 2;
RunaLexer.LORA = 3;
RunaLexer.LBRACE = 4;
RunaLexer.COLON = 5;
RunaLexer.LANGLE = 6;
RunaLexer.NUMBER = 7;
RunaLexer.COMMENT = 8;
RunaLexer.NEWLINE = 9;
RunaLexer.TEXT = 10;
RunaLexer.VAR_IDENTIFIER = 11;
RunaLexer.VAR_WS = 12;
RunaLexer.RBRACE = 13;
RunaLexer.IMPORT_AS = 14;
RunaLexer.IMPORT_WS = 15;
RunaLexer.IMPORT_NEWLINE = 16;
RunaLexer.IMPORT_PATH = 17;
RunaLexer.IMPORT_IDENTIFIER = 18;
RunaLexer.LORA_IDENTIFIER = 19;
RunaLexer.LORA_COLON = 20;
RunaLexer.LORA_NUMBER = 21;
RunaLexer.RANGLE = 22;
RunaLexer.USE_WS = 23;
RunaLexer.USE_NEWLINE = 24;
RunaLexer.USE_IDENTIFIER = 25;
RunaLexer.USE_NAME = 26;

RunaLexer.VARIABLE = 1;
RunaLexer.IMPORT_MODE = 2;
RunaLexer.LORA_MODE = 3;
RunaLexer.USE_MODE = 4;




