// Generated from runa/RunaLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,20,210,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,
2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,
18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,
7,25,2,26,7,26,2,27,7,27,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
1,7,1,8,1,8,1,8,3,8,95,8,8,1,9,4,9,98,8,9,11,9,12,9,99,1,10,5,10,103,8,10,
10,10,12,10,106,9,10,1,10,1,10,4,10,110,8,10,11,10,12,10,111,1,11,1,11,3,
11,116,8,11,1,12,3,12,119,8,12,1,12,1,12,4,12,123,8,12,11,12,12,12,124,1,
13,4,13,128,8,13,11,13,12,13,129,1,13,1,13,1,14,4,14,135,8,14,11,14,12,14,
136,1,15,1,15,5,15,141,8,15,10,15,12,15,144,9,15,1,16,4,16,147,8,16,11,16,
12,16,148,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,4,19,161,8,19,
11,19,12,19,162,1,19,1,19,1,20,1,20,1,20,1,20,1,21,4,21,172,8,21,11,21,12,
21,173,1,21,1,21,1,21,3,21,179,8,21,1,22,1,22,1,22,4,22,184,8,22,11,22,12,
22,185,1,22,1,22,1,23,1,23,5,23,192,8,23,10,23,12,23,195,9,23,1,24,1,24,
4,24,199,8,24,11,24,12,24,200,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,0,
0,28,4,1,6,2,8,3,10,4,12,5,14,0,16,0,18,0,20,0,22,0,24,0,26,6,28,7,30,0,
32,8,34,9,36,10,38,11,40,12,42,13,44,14,46,0,48,15,50,16,52,17,54,18,56,
19,58,20,4,0,1,2,3,5,2,0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,8,0,10,10,
13,13,58,58,60,60,62,62,64,64,123,123,125,125,5,0,45,45,48,57,65,90,95,95,
97,122,220,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,
0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,1,34,1,0,0,0,1,36,1,
0,0,0,1,38,1,0,0,0,2,40,1,0,0,0,2,42,1,0,0,0,2,44,1,0,0,0,2,48,1,0,0,0,2,
50,1,0,0,0,3,52,1,0,0,0,3,54,1,0,0,0,3,56,1,0,0,0,3,58,1,0,0,0,4,60,1,0,
0,0,6,70,1,0,0,0,8,77,1,0,0,0,10,81,1,0,0,0,12,83,1,0,0,0,14,85,1,0,0,0,
16,87,1,0,0,0,18,89,1,0,0,0,20,94,1,0,0,0,22,97,1,0,0,0,24,104,1,0,0,0,26,
115,1,0,0,0,28,122,1,0,0,0,30,127,1,0,0,0,32,134,1,0,0,0,34,138,1,0,0,0,
36,146,1,0,0,0,38,152,1,0,0,0,40,156,1,0,0,0,42,160,1,0,0,0,44,166,1,0,0,
0,46,178,1,0,0,0,48,183,1,0,0,0,50,189,1,0,0,0,52,198,1,0,0,0,54,202,1,0,
0,0,56,204,1,0,0,0,58,206,1,0,0,0,60,61,5,64,0,0,61,62,5,105,0,0,62,63,5,
109,0,0,63,64,5,112,0,0,64,65,5,111,0,0,65,66,5,114,0,0,66,67,5,116,0,0,
67,68,1,0,0,0,68,69,6,0,0,0,69,5,1,0,0,0,70,71,5,108,0,0,71,72,5,111,0,0,
72,73,5,114,0,0,73,74,5,97,0,0,74,75,1,0,0,0,75,76,6,1,1,0,76,7,1,0,0,0,
77,78,5,123,0,0,78,79,1,0,0,0,79,80,6,2,2,0,80,9,1,0,0,0,81,82,5,58,0,0,
82,11,1,0,0,0,83,84,5,60,0,0,84,13,1,0,0,0,85,86,7,0,0,0,86,15,1,0,0,0,87,
88,7,1,0,0,88,17,1,0,0,0,89,90,7,2,0,0,90,19,1,0,0,0,91,95,3,14,5,0,92,95,
3,16,6,0,93,95,5,95,0,0,94,91,1,0,0,0,94,92,1,0,0,0,94,93,1,0,0,0,95,21,
1,0,0,0,96,98,3,16,6,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,
1,0,0,0,100,23,1,0,0,0,101,103,3,16,6,0,102,101,1,0,0,0,103,106,1,0,0,0,
104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,104,1,0,0,0,107,109,
5,46,0,0,108,110,3,16,6,0,109,108,1,0,0,0,110,111,1,0,0,0,111,109,1,0,0,
0,111,112,1,0,0,0,112,25,1,0,0,0,113,116,3,22,9,0,114,116,3,24,10,0,115,
113,1,0,0,0,115,114,1,0,0,0,116,27,1,0,0,0,117,119,5,13,0,0,118,117,1,0,
0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,123,5,10,0,0,121,123,5,13,0,0,122,
118,1,0,0,0,122,121,1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,
0,0,125,29,1,0,0,0,126,128,3,18,7,0,127,126,1,0,0,0,128,129,1,0,0,0,129,
127,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,6,13,3,0,132,31,1,0,
0,0,133,135,8,3,0,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,
137,1,0,0,0,137,33,1,0,0,0,138,142,3,14,5,0,139,141,3,20,8,0,140,139,1,0,
0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,35,1,0,0,0,144,142,
1,0,0,0,145,147,3,18,7,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,
148,149,1,0,0,0,149,150,1,0,0,0,150,151,6,16,4,0,151,37,1,0,0,0,152,153,
5,125,0,0,153,154,1,0,0,0,154,155,6,17,5,0,155,39,1,0,0,0,156,157,5,97,0,
0,157,158,5,115,0,0,158,41,1,0,0,0,159,161,7,2,0,0,160,159,1,0,0,0,161,162,
1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,6,19,4,0,
165,43,1,0,0,0,166,167,3,28,12,0,167,168,1,0,0,0,168,169,6,20,5,0,169,45,
1,0,0,0,170,172,7,4,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,
173,174,1,0,0,0,174,179,1,0,0,0,175,179,5,46,0,0,176,177,5,46,0,0,177,179,
5,46,0,0,178,171,1,0,0,0,178,175,1,0,0,0,178,176,1,0,0,0,179,47,1,0,0,0,
180,181,3,46,21,0,181,182,5,47,0,0,182,184,1,0,0,0,183,180,1,0,0,0,184,185,
1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,188,3,46,21,
0,188,49,1,0,0,0,189,193,3,14,5,0,190,192,3,20,8,0,191,190,1,0,0,0,192,195,
1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,51,1,0,0,0,195,193,1,0,0,0,196,
199,3,20,8,0,197,199,5,45,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,200,1,
0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,53,1,0,0,0,202,203,5,58,0,0,203,
55,1,0,0,0,204,205,3,26,11,0,205,57,1,0,0,0,206,207,5,62,0,0,207,208,1,0,
0,0,208,209,6,27,5,0,209,59,1,0,0,0,23,0,1,2,3,94,99,104,111,115,118,122,
124,129,136,142,148,162,173,178,185,193,198,200,6,5,2,0,5,3,0,5,1,0,7,8,
0,6,0,0,4,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class RunaLexer extends antlr4.Lexer {

    static grammarFileName = "RunaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE", "VARIABLE", "IMPORT_MODE", "LORA_MODE" ];
	static literalNames = [ null, "'@import'", "'lora'", "'{'", null, "'<'", 
                         null, null, null, null, null, "'}'", "'as'", null, 
                         null, null, null, null, null, null, "'>'" ];
	static symbolicNames = [ null, "IMPORT", "LORA", "LBRACE", "COLON", "LANGLE", 
                          "NUMBER", "NEWLINE", "TEXT", "VAR_IDENTIFIER", 
                          "VAR_WS", "RBRACE", "IMPORT_AS", "IMPORT_WS", 
                          "IMPORT_NEWLINE", "IMPORT_PATH", "IMPORT_IDENTIFIER", 
                          "LORA_IDENTIFIER", "LORA_COLON", "LORA_NUMBER", 
                          "RANGLE" ];
	static ruleNames = [ "IMPORT", "LORA", "LBRACE", "COLON", "LANGLE", "LETTER", 
                      "DIGIT", "WHITESPACE", "IDENTIFIER_CHAR", "INTEGER", 
                      "FLOAT", "NUMBER", "NEWLINE", "WS", "TEXT", "VAR_IDENTIFIER", 
                      "VAR_WS", "RBRACE", "IMPORT_AS", "IMPORT_WS", "IMPORT_NEWLINE", 
                      "IMPORT_PATH_PART", "IMPORT_PATH", "IMPORT_IDENTIFIER", 
                      "LORA_IDENTIFIER", "LORA_COLON", "LORA_NUMBER", "RANGLE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

RunaLexer.EOF = antlr4.Token.EOF;
RunaLexer.IMPORT = 1;
RunaLexer.LORA = 2;
RunaLexer.LBRACE = 3;
RunaLexer.COLON = 4;
RunaLexer.LANGLE = 5;
RunaLexer.NUMBER = 6;
RunaLexer.NEWLINE = 7;
RunaLexer.TEXT = 8;
RunaLexer.VAR_IDENTIFIER = 9;
RunaLexer.VAR_WS = 10;
RunaLexer.RBRACE = 11;
RunaLexer.IMPORT_AS = 12;
RunaLexer.IMPORT_WS = 13;
RunaLexer.IMPORT_NEWLINE = 14;
RunaLexer.IMPORT_PATH = 15;
RunaLexer.IMPORT_IDENTIFIER = 16;
RunaLexer.LORA_IDENTIFIER = 17;
RunaLexer.LORA_COLON = 18;
RunaLexer.LORA_NUMBER = 19;
RunaLexer.RANGLE = 20;

RunaLexer.VARIABLE = 1;
RunaLexer.IMPORT_MODE = 2;
RunaLexer.LORA_MODE = 3;




